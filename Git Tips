Git Overview and Tips
What is Git?

A distributed version control system for tracking changes in source code, enabling collaboration among developers.
Example Command: git init my_project
Key Concepts

Repository: Folder tracked by Git.
Commit: Snapshot of changes.
Branch: Separate line of development.
Merge: Combines changes from different branches.
Pull Request: Proposes merging changes into the main branch.
Example Commands:
	git add .
	git commit -m "Initial commit"

Basic Git Commands
	Commands include git init, git status, git add <file>, git commit, git log, git push, and git pull.
	Example: Adding and committing changes with git add file.txt and git commit -m "Added new feature".

Branching in Git
	Enables parallel development.
	Commands: git branch <branch_name> and git checkout <branch_name>.
	Example: git branch feature-xyz and git checkout feature-xyz.

Merging in Git
	Combines changes from branches.
	Command: git merge <branch_name>.
	Example: Merging feature-xyz back into main.

Resolving Conflicts
	Occurs when automatic merging fails.
	Use git status to identify conflicts.
	Example: Resolve a conflict and commit.

Remote Repositories
	Facilitates collaboration.
	Command: git remote add origin <remote_URL>.
	Example: Adding and pushing to a remote repository.

Best Practices
	Commit frequently with clear messages.
	Use branches for features or bug fixes.
	Always pull changes from the main branch before modifying.

Example Workflow
	Initialize repository, create and switch branches, make changes, commit, push, and create a pull request.

Additional Commands and Tips
	Check Git installation and version.
	Set global user details and ignore files.
	Useful commands for viewing changes, stashing, reverting, and modifying history.

Conclusion:
	Familiarize yourself with basic commands and best practices to effectively use Git in collaborative projects.
	Utilize branching and merging for organized development, and always resolve conflicts systematically.
