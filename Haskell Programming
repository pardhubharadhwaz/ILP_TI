Learn You a Haskell for Great Good!" 

Introduction 

Key features include:  

Purely Functional Programming: Haskell doesn't allow variables to change state, and functions don't have side effects, which ensures predictable behavior and helps in building complex programs from simple, correct functions. 

Laziness: Haskell is a lazy language, meaning it won't compute values until necessary, which allows for efficient processing of data, such as working with infinite lists. 

Static Typing and Type Inference: Haskell's type system catches many errors at compile time, and type inference reduces the need for explicit type declarations. 

Elegance and Conciseness: Haskell programs tend to be shorter and more maintainable than their imperative counterparts. 

 

Starting out 

Basic Arithmetic and Boolean Operations  

Haskell supports standard arithmetic (+, -, *, /) and boolean operations (&&, ||, not) 

Use parentheses to explicitly define precedence 

Functions  

Function calls use spaces, not parentheses: succ 8 instead of succ(8) 

Functions with two parameters can be called as infix using backticks: 92 `div` 10 

Define functions using =: doubleMe x = x + x 

Lists  

Homogeneous data structure (all elements must be same type) 

Created using square brackets: [1,2,3,4] 

Concatenate lists using ++: [1,2,3] ++ [4,5,6] 

Add to beginning of list using :: 5:[1,2,3,4,5] 

Access elements by index using !!: [9.4,33.2,96.2] !! 1 

List Functions  

head: first element 

tail: all but first element 

last: last element 

init: all but last element 

length: number of elements 

null: checks if list is empty 

reverse: reverses the list 

take: extracts n elements from beginning 

drop: removes n elements from beginning 

maximum and minimum: largest and smallest elements 

sum and product: sum and product of all elements 

Ranges  

Create lists of sequential elements: [1..20], ['a'..'z'] 

Specify step: [2,4..20] 

Create infinite lists: [13,26..] 

List Comprehensions  

Similar to mathematical set comprehensions 

Basic syntax: [x*2 | x <- [1..10]]  [output_function | variable <- input_list, predicate] 

Can include predicates: [x*2 | x <- [1..10], x*2 >= 12] 

Can draw from multiple lists 

Tuples  

Fixed-size collection of heterogeneous data 

Created using parentheses: (1, "hello", 3.14) 

Pair functions: fst and snd 

zip function combines two lists into a list of pairs 

 

Type and Typeclass 

 

Static Type System:  

Every expression has a known type at compile time 

Improves code safety by catching type errors before runtime 

Type Inference:  

Haskell can infer types without explicit declarations 

Use :t in GHCI to check the type of an expression 

Basic Types:  

Char, Bool, Int, Integer, Float, Double 

[Char] is synonymous with String 

Tuples have types based on length and component types 

Function Types:  

Represented using -> 

Example: removeNonUppercase :: [Char] -> [Char] 

Multiple parameters: addThree :: Int -> Int -> Int -> Int 

Type Variables:  

Lowercase letters (a, b, c, etc.) in type signatures 

Represent any type, allowing for polymorphic functions 

Example: head :: [a] -> a 

Typeclasses:  

Define behavior that types can implement 

Similar to interfaces in other languages 

Common typeclasses: Eq, Ord, Show, Read, Enum, Bounded, Num, Integral, Floating 

Class Constraints:  

Specified before => in type signatures 

Example: (==) :: (Eq a) => a -> a -> Bool 

Type Annotations:  

Explicitly specify types using :: 

Useful when type inference is ambiguous 

Example: read "5" :: Int 

Polymorphic Constants:  

Numbers can act as different numeric types 

minBound and maxBound are polymorphic for Bounded types 

Useful Functions:  

fromIntegral: converts between numeric types 

Type: fromIntegral :: (Num b, Integral a) => a -> b 

A typeclass in Haskell defines a set of behaviors (or operations) that a type must implement to be considered an instance of that typeclass. It's similar to an "interface" in languages like Java, but with much more flexibility and power, especially with respect to polymorphism. Typeclasses allow for ad-hoc polymorphism, where functions can operate on different types, as long as those types implement the required methods from the typeclass. 

Key Features of Typeclasses: 

Ad-hoc Polymorphism: Typeclasses provide polymorphism, meaning functions can operate on multiple types. For instance, a function like (==) can compare different types (Int, Char, Bool), as long as they belong to the Eq typeclass, which defines equality (== and /=). 

Typeclass Constraints: A typeclass constraint in a function's type signature ensures that the types used with that function implement the required typeclass. For example: 

haskell 

Copy code 

(==) :: (Eq a) => a -> a -> Bool 
 

This reads as: the equality operator (==) takes two arguments of the same type a and returns a Bool, but only if a is an instance of the Eq typeclass. 

Typeclass Methods: Each typeclass defines a set of functions (methods) that must be implemented for a type to be an instance of that typeclass. For example, the Eq typeclass requires the implementation of the methods == and /=. 

Typeclass Instances: For a type to be part of a typeclass, it must provide definitions (instances) for the typeclass methods. Here's an example of making a custom type an instance of the Eq typeclass: 

haskell 

Copy code 

data Color = Red | Green | Blue 
 
instance Eq Color where 
    Red   == Red   = True 
    Green == Green = True 
    Blue  == Blue  = True 
    _     == _     = False 
 

Common Typeclasses 

Let's explore some of the most commonly used typeclasses in Haskell: 

1. Eq (Equality) 

The Eq typeclass is used for types that can be compared for equality. It defines two main functions: 

(==): Tests if two values are equal. 

(/=): Tests if two values are not equal (the default implementation is not (x == y)). 

Any type that is an instance of Eq allows comparisons like: 

haskell 

Copy code 

5 == 5    -- True 
5 /= 4    -- True 
 

2. Ord (Ordering) 

The Ord typeclass is for types that have a natural ordering. It builds on Eq, meaning any type that is an instance of Ord must also be an instance of Eq. Ord provides functions like: 

(<), (<=), (>), (>=) for ordering comparisons. 

compare: Returns an Ordering (LT, GT, or EQ). 

Example: 

haskell 

Copy code 

5 > 3       -- True 
"apple" < "banana"  -- True 
 

3. Show (String Representation) 

The Show typeclass is for types that can be converted to a string. It provides the show function: 

haskell 

Copy code 

show 5      -- "5" 
show True   -- "True" 
show [1,2,3]  -- "[1,2,3]" 
 

This is useful for printing values to the console. 

4. Read (Parsing from a String) 

The Read typeclass is the opposite of Show. It allows a string to be converted into a value of a type, using the read function: 

haskell 

Copy code 

read "5" :: Int     -- 5 
read "True" :: Bool -- True 
read "[1,2,3]" :: [Int]  -- [1,2,3] 
 

If the type can't be inferred from context, we must specify it explicitly using ::. 

5. Enum (Sequential Types) 

The Enum typeclass is for types that have predecessors and successors. It allows types to be enumerated, and is useful for things like list ranges. Functions provided include: 

succ: Successor. 

pred: Predecessor. 

Example: 

haskell 

Copy code 

succ 5   -- 6 
pred 'b' -- 'a' 
[1..5]   -- [1,2,3,4,5] 
['a'..'d']  -- "abcd" 
 

6. Bounded (Upper and Lower Bounds) 

The Bounded typeclass is for types that have a minimum and maximum value. It provides two functions: 

minBound: The smallest value for the type. 

maxBound: The largest value for the type. 

Example: 

haskell 

Copy code 

minBound :: Int      -- -2147483648 
maxBound :: Char     -- '\1114111' 
maxBound :: Bool     -- True 
 

7. Num (Numeric Types) 

The Num typeclass is for types that behave like numbers. It provides basic arithmetic operations like +, -, and *. Most numeric types (Int, Integer, Float, Double) are instances of Num. 

Example: 

haskell 

Copy code 

5 + 3       -- 8 
(5 :: Int) * 2  -- 10 
 

8. Integral (Whole Numbers) 

The Integral typeclass is a subclass of Num, specifically for whole numbers. This includes types like Int and Integer. 

9. Floating (Floating-Point Numbers) 

The Floating typeclass is another subclass of Num, but for floating-point numbers (Float and Double). 

10. Functor (Mapping over structures) 

The Functor typeclass is used for types that can be mapped over. It defines the fmap function: 

haskell 

Copy code 

fmap :: Functor f => (a -> b) -> f a -> f b 
 

This means you can apply a function to the contents of some structure (Maybe, List, etc.): 

haskell 

Copy code 

fmap (+1) [1,2,3]    -- [2,3,4] 
fmap (+1) (Just 5)   -- Just 6 
 

Creating Custom Typeclasses 

You can create your own typeclass in Haskell, specifying the behavior you want types to implement. Here's an example: 

haskell 

Copy code 

class Eq a => MyComparable a where 
    isGreater :: a -> a -> Bool 
 
instance MyComparable Int where 
    isGreater x y = x > y 
 

This example defines a custom typeclass MyComparable that provides a method isGreater for comparing two values. It also enforces that any type that is an instance of MyComparable must also be an instance of Eq. 

Summary 

Typeclasses define a set of behaviors or operations that types must implement. 

Functions can have typeclass constraints to ensure they only operate on types that are instances of a specific typeclass. 

Haskell has several built-in typeclasses, such as Eq (equality), Ord (ordering), Show (string conversion), and many more. 

You can create your own custom typeclasses and define how certain types behave with specific operations. 

Typeclasses are one of the core features that make Haskell a powerful language, enabling clean and flexible code through polymorphism and type safety. 

Guards: 

Guards are a way to handle multiple conditions for a function. They use boolean expressions and return the first one that evaluates to True. 

Syntax: Guards are written after a pipe |, and typically aligned neatly for readability. 

Example: 

haskell 

Copy code 

bmiTell :: (RealFloat a) => a -> a -> String 
bmiTell weight height 
    | weight / height ^ 2 <= 18.5 = "You're underweight!" 
    | weight / height ^ 2 <= 25.0 = "You're normal." 
    | otherwise = "You're overweight!" 
 

where bindings: 

The where keyword allows you to define local variables and helper functions that can be reused within the body of a function. 

It helps avoid redundancy and improves readability by defining values or expressions that might be repeated. 

Example: 

haskell 

Copy code 

bmiTell :: (RealFloat a) => a -> a -> String 
bmiTell weight height 
    | bmi <= 18.5 = "You're underweight!" 
    | bmi <= 25.0 = "You're normal." 
    | bmi <= 30.0 = "You're overweight." 
    | otherwise = "You're obese." 
    where bmi = weight / height ^ 2 
 

Pattern Matching: 

You can pattern match inside where bindings to extract values. 

Haskell allows you to match lists, tuples, etc., in both function arguments and within where. 

Example: 

haskell 

Copy code 

initials :: String -> String -> String 
initials firstname lastname = [f] ++ ". " ++ [l] ++ "." 
    where (f:_) = firstname 
          (l:_) = lastname 
 

Defining Functions within where: 

where can contain not only variables but also helper functions. These local functions can help keep the main function clean by offloading specific tasks. 

Example: 

haskell 

Copy code 

calcBmis :: (RealFloat a) => [(a, a)] -> [a] 
calcBmis xs = [bmi w h | (w, h) <- xs] 
    where bmi weight height = weight / height ^ 2 
 

 

In Haskell, let and where are two ways to bind variables to values within a function, but they serve slightly different purposes and are used in different ways. Let's explore them in detail and compare their usage. 

let bindings 

Scope and Usage: let bindings are expressions that allow you to bind variables to values or patterns locally within an expression. They are visible only within the expression in which they are defined. 

Syntax: The form is let <bindings> in <expression>. The variables defined in the let block are accessible only in the expression following the in keyword. 

Example: 

haskell 

Copy code 

cylinder :: (RealFloat a) => a -> a -> a 
cylinder r h = 
    let sideArea = 2 * pi * r * h 
        topArea = pi * r ^ 2 
    in  sideArea + 2 * topArea 
 

Here, sideArea and topArea are local to the expression after the in part and used to compute the cylinder's surface area. 

Key Features of let bindings: 

Locality: let bindings are very local and do not span across different parts of the function, such as guards or other scopes. 

Expression Form: Since let bindings are expressions, you can use them anywhere an expression is valid. This includes inside other expressions like if-else, list comprehensions, or even within another let block. 

For example: 

haskell 

Copy code 

ghci> 4 * (let a = 9 in a + 1) + 2 
42 
 

Inline Bindings: You can use let bindings inline, which can be convenient for small, temporary computations. If you need to bind several variables inline, you can separate them with semicolons. 

Example: 

haskell 

Copy code 

ghci> (let a = 100; b = 200; c = 300 in a*b*c, let foo="Hey "; bar = "there!" in foo ++ bar) 
(6000000, "Hey there!") 
 

Pattern Matching: You can use pattern matching with let bindings, which is useful for destructuring tuples or lists. 

Example: 

haskell 

Copy code 

ghci> (let (a,b,c) = (1,2,3) in a+b+c) * 100 
600 
 

List Comprehensions: You can use let bindings inside list comprehensions to define values for each element of the comprehension, which makes them very powerful. 

Example: 

haskell 

Copy code 

calcBmis :: (RealFloat a) => [(a, a)] -> [a] 
calcBmis xs = [bmi | (w, h) <- xs, let bmi = w / h ^ 2] 
 

Interactive Use: In GHCi (the Haskell interpreter), let bindings can be used without the in part when defining constants or functions, and those bindings will be visible throughout the session. 

Example: 

haskell 

Copy code 

ghci> let zoot x y z = x * y + z 
ghci> zoot 3 9 2 
29 
 

where bindings 

Scope and Usage: where bindings are not expressions themselves but rather syntactic constructs used to define variables at the end of a function. The variables defined in a where block are visible throughout the function, including guards and different parts of the function body. 

Example: 

haskell 

Copy code 

cylinder :: (RealFloat a) => a -> a -> a 
cylinder r h = sideArea + 2 * topArea 
    where 
        sideArea = 2 * pi * r * h 
        topArea  = pi * r ^ 2 
 

Key Features of where bindings: 

Wider Scope: The variables defined in the where clause are available throughout the entire function. This includes use within guards or multiple equations for pattern matching. 

Example: 

haskell 

Copy code 

bmiTell :: (RealFloat a) => a -> a -> String 
bmiTell weight height 
    | bmi <= 18.5 = "You're underweight." 
    | bmi <= 25.0 = "You're supposedly normal." 
    | bmi <= 30.0 = "You're overweight." 
    | otherwise   = "You're obese." 
    where bmi = weight / height ^ 2 
 

In this case, bmi is calculated in the where block and is accessible across all the guards. 

Readable Code: Many people prefer where bindings because they appear at the end of the function, keeping the function body closer to the function's name and type declaration. This can make the code more readable, especially for larger functions. 

Guards and Multiple Equations: where bindings work well with guards and pattern matching over multiple function equations, whereas let is limited to local scope. 

Example: 

haskell 

Copy code 

maxOfThree :: (Ord a) => a -> a -> a -> a 
maxOfThree a b c 
    | a >= b && a >= c = a 
    | b >= a && b >= c = b 
    | otherwise        = c 
    where 
        average = (a + b + c) / 3 
 

Can't Be Used in Expressions: Unlike let, you can't just use where bindings in arbitrary expressions. They are tied to the function definition as a syntactic construct. 

Comparison of let vs where: 

Featue 

let 

where 

Scope 

Local, used in expressions, not across guards 

Wider, across guards and function equations 

Position 

Can appear anywhere in the function body 

Must appear at the end of the function 

Expression 

Is an expression itself 

Not an expression 

Use Cases 

Best for local bindings or inline calculations 

Best for guards, pattern matching, and clarity 

Readability 

Can be harder to read if used in complex expressions 

Often preferred for readability 

When to Use let vs where: 

Use let when you need a local, temporary binding within an expression or list comprehension, or when you're working in GHCi. 

Use where when you need to share values across guards or want to keep the function body near its definition for readability. 

In summary, both constructs have their use cases, but they differ in scope, readability, and how they're used in Haskell's syntax. The choice between them depends on the structure of your function and your preferences for readability. 

 

 

 

Case Expressions 

In Haskell, case expressions are a powerful tool for evaluating expressions based on the patterns that match a given value. They're similar to switch-case statements found in imperative languages like C, C++, or Java, but with several advantages, including the ability to perform pattern matching and work as expressions that return values, not just execute code. 

Overview of Case Expressions 

A case expression allows you to inspect a value and branch the logic depending on which pattern matches the value. Here's the general syntax: 

haskell 

Copy code 

case expression of 
    pattern1 -> result1 
    pattern2 -> result2 
    pattern3 -> result3 
    ... 
 

expression: This is the value you're evaluating, such as a variable or a function call. 

pattern1, pattern2, ...: These are the patterns you want to match the value against, similar to how function arguments can be matched in pattern matching. 

result1, result2, ...: These are the expressions that are evaluated if the corresponding pattern matches. 

If none of the patterns match the expression, you'll get a runtime error (similar to an incomplete pattern match). 

Basic Example: 

Consider the following example of using a case expression to replicate the head function for lists: 

haskell 

Copy code 

head' :: [a] -> a 
head' xs = case xs of 
    [] -> error "No head for empty lists!" 
    (x:_) -> x 
 

Here, case xs of is used to pattern match on the list xs. 

If the list is empty ([]), it raises an error. 

If the list has at least one element ((x:_)), it returns the first element (x). 

This does exactly the same thing as defining the function with pattern matching in the function signature itself, like so: 

haskell 

Copy code 

head' :: [a] -> a 
head' [] = error "No head for empty lists!" 
head' (x:_) = x 
 

How Case Expressions Compare to Function Pattern Matching 

Pattern matching in function definitions is essentially syntactic sugar for case expressions. For example: 

haskell 

Copy code 

head' [] = error "No head for empty lists!" 
head' (x:_) = x 
 

Is equivalent to: 

haskell 

Copy code 

head' xs = case xs of 
    [] -> error "No head for empty lists!" 
    (x:_) -> x 
 

Both approaches achieve the same result: matching the input value against the possible patterns and returning a corresponding result. The function version just looks more concise because Haskell abstracts the case syntax away. 

The Power of Case Expressions 

What makes case expressions powerful is that they can be used anywhere in your code, not just in function definitions. For example, you can use a case expression inside another expression to make more complex logic work seamlessly. 

Example: Describe a List 

Here’s an example where case expressions are used within a larger expression to describe the contents of a list: 

haskell 

Copy code 

describeList :: [a] -> String 
describeList xs = "The list is " ++ case xs of 
    [] -> "empty." 
    [x] -> "a singleton list." 
    _ -> "a longer list." 
 

The expression case xs of inspects the list xs: 

If it's an empty list ([]), it returns "empty.". 

If it contains exactly one element ([x]), it returns "a singleton list.". 

If it's longer (_ is a wildcard pattern that matches any value), it returns "a longer list.". 

This shows how case expressions can be embedded into other expressions (here, it's part of the string concatenation) to build complex behaviors. 

Another Way: Using where 

For the same functionality, we could also write the function using pattern matching inside a where clause, like this: 

haskell 

Copy code 

describeList :: [a] -> String 
describeList xs = "The list is " ++ what xs 
    where 
        what [] = "empty." 
        what [x] = "a singleton list." 
        what _ = "a longer list." 
 

In this version: 

We delegate the pattern matching to a helper function what, defined in the where block. 

This keeps the case analysis outside the main function body, which some might find more readable. 

Both approaches are equally valid and interchangeable, depending on whether you prefer using case expressions directly in the body or using helper functions. 

Advanced Uses of Case Expressions 

Pattern Matching Complex Data Types: Case expressions are not limited to simple patterns. They work with all forms of pattern matching, including tuples, lists, and custom data types. 

haskell 

Copy code 

data Shape = Circle Float | Rectangle Float Float 
 
describeShape :: Shape -> String 
describeShape shape = case shape of 
    Circle r -> "A circle with radius " ++ show r 
    Rectangle w h -> "A rectangle with width " ++ show w ++ " and height " ++ show h 
 

Here, we match the shape value against constructors of the Shape type. The result depends on whether it's a Circle or a Rectangle. 

Case Expressions in Guards: You can also use case expressions within guards to match against multiple patterns. 

haskell 

Copy code 

bmiTell :: (RealFloat a) => a -> a -> String 
bmiTell weight height 
    | bmi <= 18.5 = "You're underweight." 
    | bmi <= 25.0 = "You're supposedly normal." 
    | bmi <= 30.0 = "You're overweight." 
    | otherwise   = case (weight, height) of 
        (w, h) -> "You're really overweight! Your weight is " ++ show w 
    where bmi = weight / height ^ 2 
 

Nested Case Expressions: Case expressions can be nested if needed, allowing for multiple levels of pattern matching. 

haskell 

Copy code 

nestedCase :: (Int, Int) -> String 
nestedCase (x, y) = case x of 
    0 -> "x is zero, " ++ case y of 
        0 -> "y is also zero." 
        _ -> "but y is non-zero." 
    _ -> "x is non-zero." 
 

Key Points to Remember: 

Case expressions are expressions: Just like if-else or let, they return values based on pattern matching. 

Pattern Matching: You can match on any kind of pattern, whether it’s a simple value, a tuple, a list, or a more complex data structure. 

Fallback (wildcards): Using the _ pattern as a fallback for unmatched cases ensures that you cover all possibilities. 

More Flexible Than Function Pattern Matching: Since case expressions can be used anywhere in the code, they provide greater flexibility than pattern matching in function definitions. 

 

 

 

 

 
