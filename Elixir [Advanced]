``OTP(Open Telecom Platform) Concurrency``:

Your room has a big toy box. Assume that the toys are robots. Robots are there with lots of capabilities. There are robots who can walk, talk, play musical instruments, and so on. Each of them does things here peacefully without disturbing others.

OTP is as if the special set of rules and tools that helps these robots (or toys) work together in an organized way. Concurrency means that when one robot is doing something, other robots can also do their jobs at the same time, and they do not get in each other's way!

Concurrency in Elixir is the way to ensure different tasks-for example, checking emails, sending messages or playing games-might all happen at once without waiting for each other. OTP gives us the rules for organizing all these tasks properly.

GenServer: The Boss of the Robots
Now, in your toy box, one robot runs around to organize and tell other robots what to do. Such a thing is like a GenServer.

A GenServer is a helper which listens to requests, performs some work, and then sends back the result. It is pretty much a robot manager which talks to the rest of the robots so that everyone knows what needs to be done.

Imagine that when you ask, say, a question such as "What's the weather today?" instead of asking all of your robots in the toy box, you ask the GenServer, and off it goes to get the answer and gives it back to you. That is the role of the GenServer-to handle the communication.
Well, the GenServer is a module in Elixir that makes certain programs don't fight over which job gets done-checking the weather, posting a message, playing music.

defmodule SimpleQueue do
  use GenServer

  @doc """
  Start our queue and link it.
  This is a helper function
  """
  def start_link(state \\ []) do
    GenServer.start_link(__MODULE__, state, name: __MODULE__)
  end

  @doc """
  GenServer.init/1 callback
  """
  def init(state), do: {:ok, state}
end
Key Points:
GenServer.start_link/3 starts the GenServer and links it to the current process. The state (like a queue or list) is passed to the server when it starts.
init/1 is a callback that sets up the initial state. Here, the state is an empty list [] or any state we pass when starting the GenServer.

Synchronous Functions: Taking Turns

The original asynchronous functions can be likened to line waiting. If you want to ask the GenServer something, you essentially queue up a request to the GenServer and wait until it returns the answer to your question.
For example, imagine you ask a GenServer, "Do you know what time is?" You wait for the GenServer to get its time and then to give that back to you. You can't ask any other questions until you get your answer. It's like waiting your turn to speak!

Important Note: Synchronous functions are ask-wait-get.

defmodule SimpleQueue do
  use GenServer

  @doc """
  GenServer.init/1 callback
  """
  def init(state), do: {:ok, state}

  @doc """
  GenServer.handle_call/3 callback
  """
  def handle_call(:dequeue, _from, [value | state]) do
    {:reply, value, state} # Reply with the first value and update the state
  end

  def handle_call(:dequeue, _from, []), do: {:reply, nil, []} # If the queue is empty, reply with nil

  def handle_call(:queue, _from, state), do: {:reply, state, state} # Just reply with the current queue

  ### Client API / Helper functions

  def start_link(state \\ []) do
    GenServer.start_link(__MODULE__, state, name: __MODULE__)
  end

  def queue, do: GenServer.call(__MODULE__, :queue) # Call to get the current queue
  def dequeue, do: GenServer.call(__MODULE__, :dequeue) # Call to remove a value from the queue
end
Key Points:
handle_call/3 processes a synchronous request. It must always reply with a tuple like {:reply, response, new_state}.
The queue starts with some values (e.g., [1, 2, 3]), and you can dequeue values or check the current queue state.

Example Usage:

SimpleQueue.start_link([1, 2, 3])
SimpleQueue.dequeue   # This will return 1 and remove it from the queue
SimpleQueue.dequeue   # This will return 2 and remove it from the queue
SimpleQueue.queue     # This will return the current queue: [3]

Asynchronous Functions: Doing Other Things While Waiting
The main difference is an asynchronous function does not have to wait for the GenServer to complete. You ask your question, but instead of just standing there waiting for the answer, you go off and do something else while the GenServer works on your request.
You can ask the GenServer to "clean the room" whereas the entire time it is cleaning the room you go and play with some other toy. When it is done, the GenServer says, "The room is clean!" You didn't have to wait until the whole process was over you could do other entertaining things in the meantime!
Key Point: In async functions, you send out the request and can do other things until you receive the answer.

defmodule SimpleQueue do
  use GenServer

  ### GenServer API

  @doc """
  GenServer.init/1 callback
  """
  def init(state), do: {:ok, state}

  @doc """
  GenServer.handle_call/3 callback
  """
  def handle_call(:dequeue, _from, [value | state]) do
    {:reply, value, state}
  end

  def handle_call(:dequeue, _from, []), do: {:reply, nil, []}

  def handle_call(:queue, _from, state), do: {:reply, state, state}

  @doc """
  GenServer.handle_cast/2 callback
  """
  def handle_cast({:enqueue, value}, state) do
    {:noreply, state ++ [value]} # Add the value to the queue without waiting for a response
  end

  ### Client API / Helper functions

  def start_link(state \\ []) do
    GenServer.start_link(__MODULE__, state, name: __MODULE__)
  end

  def queue, do: GenServer.call(__MODULE__, :queue) # Call to get the current queue
  def enqueue(value), do: GenServer.cast(__MODULE__, {:enqueue, value}) # Asynchronous enqueue request
  def dequeue, do: GenServer.call(__MODULE__, :dequeue) # Call to remove a value from the queue
end
Key Points:
handle_cast/2 processes an asynchronous request. It doesnâ€™t reply, and it only updates the state.
We use GenServer.cast to add a value to the queue without blocking the caller.

Example Usage:

SimpleQueue.start_link([1, 2, 3])
SimpleQueue.queue     # Returns: [1, 2, 3]
SimpleQueue.enqueue(20)  # Adds 20 to the queue without waiting
SimpleQueue.queue     # Returns: [1, 2, 3, 20]

Summary of Key Points:
OTP Concurrency: Imagine many robots completing their work all at once, without messing up each other's work. OTP allows these robots to be organized.
GenServer: The robot boss that organizes it and completes work. It is like a helper where he takes care of your requests and gives out the answers.
Synchronous Functions: You request a question, wait for the answer, then get it. Just like waiting in line.
Asynchronous Functions: You request a question and move on doing anything else, meanwhile, the answer returns back to you. Just like playing while your robot cleans the room.
By using these technologies, Elixir makes many things happen at once without everything getting messy!

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

What are Supervisors in Elixir?
Imagine you are in a huge toy store with hundreds of shelves. Each shelf holds dozens of toys. Imagine that one of the toys breaks. You wouldn't let it break and then let every other toy fall. In other words, you would fix it or replace it so everything will keep running nicely.

Supervisors in Elixir are similar to store managers. They make sure that all the toys (or, in this case, processes) lined up along the shelves are running at all times. If a toy breaks down, the manager (the supervisor) will replace it with a new one so that the store will continue to function.

What Does a Supervisor Do?

A supervisor is a special process whose purpose is to:

Monitor other processes (child processes).
Automatically restart them if they fail or stop working.
This is like a manager who is watching the workers, and if one of them gets tired or makes a mistake, the manager gives them a new task or starts them over.

Configuration of Supervisors
When you create a supervisor, you need to tell it:

What child processes (tasks or workers) to monitor.
What to do if one of the child processes breaks or stops working (this is called the strategy).
Example Code:
Here's how we create a supervisor in Elixir for our SimpleQueue process:

defmodule SimpleQueue.Application do
  use Application

  def start(_type, _args) do
    children = [
      {SimpleQueue, [1, 2, 3]}  # Starting our SimpleQueue process with initial values
    ]

opts = [strategy: :one_for_one, name: SimpleQueue.Supervisor]
 Supervisor.start_link(children, opts)  # Start the supervisor with the strategy
end
end
Main points:
The supervisor is started with a list of children (in this case, the SimpleQueue).
The strategy :one_for_one means that if one child process crashes, only that process will be restarted.
The supervisor will ensure that the SimpleQueue is always running. That is, the supervisor has support for automatically restarting the SimpleQueue if anything goes wrong.
What If a Process Crashes?
Consider what happens when the SimpleQueue crashes or fails. Because the supervisor is running, the SimpleQueue is automatically restarted. That is, even if something goes wrong, the system runs without problems.

Failure Handling Strategies
There are a few strategies a supervisor may use in order to handle failures of its child processes:

:one_for_one: Restart only the failed child process.
:one_for_all: Restart all children if one of them fails.
:rest_for_one: Restart the failed process and all processes started after it.
Child Specification
The child specification directs the supervisor on how to manage the child processes like how to start them up, shut them down, and restart. This is essential for the supervisor to know how to handle the child processes once something goes wrong.

For instance, with our SimpleQueue we may define how to start the child and what should be done if it crashes:

def child_spec(opts) do
  %{
    id: SimpleQueue,
start: {__MODULE__, :start_link, [opts]},  # How to start the SimpleQueue process
    shutdown: 5000,  # Wait this long (5 seconds) before shutting it down
    restart: :permanent,  # Always restart if it crashes
    type: :worker  # It's a worker process
  end
end
DynamicSupervisor
Sometimes, we are not aware which child processes we need to start. Imagine, for example, when a new user logs in to a web application-we need to start a new process for them only. In such a scenario, we use DynamicSupervisor.

DynamicSupervisor gives us an ability to start child processes on demand-that is, to add new processes as necessary.

options = [
  name: SimpleQueue.Supervisor,
  strategy: :one_for_one
]
 
DynamicSupervisor.start_link(options)

= DynamicSupervisor.start_child(SimpleQueue.Supervisor, SimpleQueue)
This is useful when we don't know exactly how many processes we'll need to start at the beginning but might need to create them while the app is running.

Task Supervisor
A Task Supervisor is a specific type of supervisor for transient work, for example, to perform background work like the order processing or managing a message. It employs DynamicSupervisor under the hood but can manage short tasks which may automatically crash.
This is how we could define a task supervisor:

children = [
  {Task.Supervisor, name: ExampleApp.TaskSupervisor, restart: :transient}
]
{:ok, pid} = Supervisor.start_link(children, strategy: :one_for_one)
Supervised Tasks
Now that we have a Task Supervisor, we can start running tasks managed automatically (so if they crash, they will be reinitialized):

{:ok, pid} = Task.Supervisor.start_child(ExampleApp.TaskSupervisor, fn -> background_work end)
If background_work ever crashes or fails, Task Supervisor will automatically reinitialize it for us.

Key Concepts Summary
Supervisors: Special processes which monitor others and automatically restart them when they go bad. They make your app fault-tolerant.

Child Processes: The processes that the supervisor is running. For instance, in our case, SimpleQueue is a child process of the supervisor.

Strategies:

:one_for_one Just restart the failed process.
:one_for_all Restart all processes on failure.
:rest_for_one Restart the failed process as well as those started after it.
Dynamic Supervisor: A supervisor which enables to start child processes dynamically during runtime of an application, for example, at connection of new user.

Task Supervisor An overseer for short-lived tasks, such as jobs that run in the background and might fail but should reboot automatically.

With supervisors, your application will continue to run even though parts of it will fail because Elixir will magically have this manager fix things when they break; you need not worry about it.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1. Inter-node Communication
Elixir has very robust support for distributed computation, using the Erlang VM (BEAM). A node is a copy of the Erlang runtime system-which allows execution of processes and it can communicate with other nodes. These nodes can be run on different machines, or on one machine. Each node has a name.

Starting Nodes
To begin an Elixir node, we open an iex session and provide a name. For instance, we could start a node named alex@localhost: in one terminal.
 
iex --sname alex@localhost
In another terminal, we can start a node named kate@localhost:
 
iex --sname kate@localhost
Here the --sname sets the short name of the node. In a production environment, or on multiple machines, you will use --name instead.

Now we have two nodes: alex@localhost and kate@localhost. Those nodes can talk to each other.

2. Messaging between Nodes
The moment we create more than one node, they can send messages to each other. One of the most straightforward operations to achieve this is Node.spawn_link/2.

Working with Node.spawn_link/2
This function allows us to call a function on a different node from the present node within an iex session. So, we will call a function on the kate@localhost node from the alex@localhost node.

Let's define a module Kate on the kate@localhost node:

iex(kate@localhost)> defmodule Kate do
  .(kate@localhost)>   def say_name do
  .(kate@localhost)>     IO.puts "Hi, my name is Kate"
.(kate@localhost)>   end
  .(kate@localhost)> end
We can invoke the say_name function at the kate@localhost node from the alex@localhost node like this using Node.spawn_link/2:
 elixir
Copy code
iex(alex@localhost)> Node.spawn_link(:kate@localhost, fn -> Kate.say_name end)
Hi, my name is Kate
#PID<10507.132.0>
The "Hi, my name is Kate" message is now printed to the alex@localhost terminal, not kate@localhost. That's because the calling node alex@localhost is the group leader for I/O management.
 
3. Handling Messages
However, now assume that we wish the remote node to send a reply back to the calling node. This can be done using the send and receive mechanism in Elixir, how it behaves is not significantly different from how message passing in Erlang's actor model works.

Example Sending and Receiving Messages
Suppose alex@localhost shall query kate@localhost and get a reply back from her. On alex@localhost, we can send out a message and then wait for the reply to come back. Here is how you can do that:
Create a process on the remote node kate@localhost waiting for a message.
Send a message from alex@localhost and wait for the reply to come back.
Here is the code for the remote process running on kate@localhost
Using iex
elixir
Copy code
iex(alex@localhost)> pid = Node.spawn_link :kate@localhost, fn -> CALLBACK
=> send alex_node_pid, :sup?
end
end
The kate@localhost node is listening for the message {:hi, alex_node_pid} and then sends the message :sup? back to the caller's PID, alex_node_pid.
 
Now, from alex@localhost, we can send the message and receive the response:

iex(alex@localhost)> send(pid, {:hi, self()})
{:hi, #PID<0.106.0>}
iex(alex@localhost)> flush()
:sup?
:ok
The flush() function in iex reads messages from the message queue. Here, it returns the message :sup?, meaning the node responded on the other side.

4. Nodes Across Different Networks
If you run nodes on different machines, you must ensure that the nodes can talk securely to each other. In Erlang/Elixir it's achieved with a cookie. A cookie is the shared secret that nodes need to know each other to able to communicate.

Sharing a Cookie

to get two nodes to start with a shared cookie, you just launch the nodes with the same --cookie option like this:

bash
Copy
iex --sname alex@localhost --cookie secret_token
iex --sname kate@localhost --cookie secret_token
Now both the nodes alex@localhost and kate@localhost are connected with each other as they share the same cookie. Now if two nodes don't share the same cookie, then the nodes can't communicate with each other.
5. Distributing Jobs
One of the most important features of Elixir is spawning and supervising tasks across distributed nodes. This allows us to make applications where workers or tasks can be dynamically added to nodes on the network.
----------------
Example: Chat Application
Suppose you are building a simple chat app in which you let people communicate across distributed nodes. We will use Task Supervisors to manage the tasks that handle chat messages.
Defining the Supervisor Application
We start by defining the supervisor that will be in charge of all of the tasks that our application is set to run. In the chat application, we define a supervisor that oversees a Task.Supervisor.

Here's how one sets up the supervisor:

# lib/chat/application.ex
defmodule Chat.Application do
  use Application

  def start(_type, _args) do
    children = [
      {Task.Supervisor, name: Chat.TaskSupervisor}

opts = [strategy: :one_for_one, name: Chat.Supervisor]
    Supervisor.start_link(children, opts)
  end
end
Here, we define a Task.Supervisor that will supervise tasks. Tasks are those things that may be in the form of processing any message or running a job in the background.
6 Sending Messages with Supervised Tasks
Task.Supervisor allows running tasks asynchronously across distributed nodes. This is how we can send a message along with a supervised task:

# lib/chat.ex
defmodule Chat do
  def receive_message(message) do
    IO.puts message
  end

  def send_message(recipient, message) do
    spawn_task __MODULE__, :receive_message, recipient, [message]
  end

  defp spawn_task(module, fun, recipient, args) do
    recipient
    |> remote_supervisor()
    |> Task.Supervisor.async(module, fun, args)
    |> Task.await()
  end

  defp remote_supervisor(recipient) do
    {Chat.TaskSupervisor, recipient}
  end
end
In the function send_message/2, we create a task that runs receive_message/1 on the remote node-receiver. The task is supervised by Chat.TaskSupervisor. Which implies that if that task fails, it will restart.

7. Distributed Code Testing
Testing distributed applications can be challenging because of different nodes involved. Nevertheless, you can write tests and conditionally exclude those tests if the nodes are not available.

Example Test
A simple test for the send_message/2 function could look something like this:


# test/chat_test.exs
defmodule ChatTest do
  use ExUnit.Case, async: true
  import Chat

  test "send_message" do
    assert Chat.send_message(:moebi@localhost, "hi") == :ok
  end
end
This test attempts to send a message to the moebi@localhost node. If that node is down, the test will fail. You can exclude such tests based on availability of nodes.

Excluding Tests Based on Availability
You can conditionally exclude distributed tests based on whether a node is alive:

# test/test_helper.exs
exclude =
  if Node.alive?, do: [], else: [distributed: true]
Latest
ExUnit.start(exclude: exclude)
If the node is not alive, tests tagged with the: distributed tag will be skipped.

Conclusion
Erlang's distributed capabilities in Elixir are fairly powerful, with the same capabilities to reliability and concurrency that Erlang offers. Using the Node module and Task.Supervisor, we can construct systems that process messages and tasks between nodes, and the nodes may either on the same machine or spread over a network.

This lesson covers
Communication between nodes using Node.spawn_link/2.
It enables the message to be communicated between nodes, including both sending and receiving a message.
Task supervision in a distributed system is also provided.
It handles the remote tasks along with an implementation of ensuring them to be supervised.
Testing the distributed code and handling node availability is enabled.
These tools enable us to build quite high concurrent, fault-tolerant applications across distributed systems.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

What is Metaprogramming?
You may think of metaprogramming as that magic wand for your code. You are writing some "special" code; that "special" code writes or changes the regular code in running time.

Suppose you are building a toy robot, and normally you would instruct the robot to do each task one by one. However, with metaprogramming, you can program the robot to give itself instructions on what to do when it needs it instead of teaching it every time. Thus, it can somehow figure some tasks on its own and save you time.

The Key Elements of Metaprogramming in Elixir
Some key tools Elixir provides us for metaprogramming are:
  --Quote
  --Unquote
  --Macros
  --Debugging Tools
  --Private Macros
  --Macro Hygiene
  --Binding Variables
Let's go through them one by one!
1. Quote
The first thing about metaprogramming is understanding how Elixir sees your code "under the hood". When Elixir runs your code, it doesn't run instructions like IO.puts("Hello") in situ. It rather translates them into something called an Abstract Syntax Tree or AST. That's somehow like a tree where every branch is representing some part of your code. You might think of an AST as being the structure or blueprint of your code.

With Elixir, we can look into this blueprint using the quote function. Here is how it goes:

quote do: 42
# This returns 42
quote do: "Hello"
# This returns "Hello"
quote do: 1 + 2
# This returns {:+, [context: Elixir, import: Kernel], [1, 2]}
When we quote with do:. we get back the internal structure of what Elixir uses to understand what the code does.

Simple values like 42 or "Hello" remain the same.
Phrases like 1 + 2 turn into a tuple that Elixir then interprets.
2. Unquote
Now that we can look at the blueprint (AST), how do we actually modify it? That's where unquote comes in. unquote allows us to insert actual values or expressions back into our quoted code. It "unlocks" or "unwraps" the values and injects them into the code.
Here's an example:

denominator = 2
quote do: divide(42, denominator)
# This returns: {:divide, [], [42, {:denominator, [], Elixir}]}

quote do
  divide(42, unquote(denominator))
# This returns: {:divide, [], [42, 2]}

In the first example, denominator is quoted so that Elixir puts the variable name :denominator in the AST. But in the second example, we use unquote(denominator) to inject the value 2 into the AST directly, so it becomes 42, 2.

3. Macros
Macros Okay, so macros. A macro is somewhat similar to a special kind of function in Elixir, but this function will generate some code for us instead of just running some code. Any code in the macro will replace the whole macro call completely at compiletime and not at runtime.

This is an example of creating your own macro to create an unless statement, which does not exist on Elixir by default:

defmodule OurMacro do
  defmacro unless(expr, do: block) do
    quote do
      if !unquote(expr), do: unquote(block)
    end
  end
end
Using the unless macro, you can now do this:

require OurMacro
OurMacro.unless true, do: "Hi"
# This outputs nothing


OurMacro.unless false, do: "Hi"
# This prints "Hello"
The macro replaces OurMacro.unless with an if statement. It tests whether the condition is not true (!expr), and if it's false, it runs the block of code inside the do part.

4. Debugging Macros
Writing macros can be tricky, especially when you have a lot of quoted code. How do you understand what the macro is doing? Elixir has some debugging tools that can help:

Macro.to_string/2 Convert quoted code to a string. It is like an internal representation of that macro translated into normal code which you may read.


Macro.to_string(quote do: foo.bar(1, 2, 3))
# Returns: "foo.bar(1, 2, 3)"
Macro.expand/2 and Macro.expand_once/2: Let you see how a macro is expanded to actual code. expand/2 will expand the macro multiple times if that is needed but expand_once/2 will expand the macro only once.

elixir
Paste
quoted = quote do: OurMacro.unless(true, do: "Hi")
Macro.expand_once(quoted, __ENV__)
# Expands to: if !true do
  #             "Hi"
  #           end
5. Private Macros
And in Elixir, we can also define private macros. Private macros are those macros that can be used only within the module they are defined in. They serve as kind of secret tools you wouldn't want the outside world to access.

To define a private macro, we use defmacrop:

defmodule MyModule do
  defmacrop private_macro do
    IO.puts "This is private!"
  end
end
You can't use this private macro from anything outside your MyModule module.

6. Macro Hygiene
There is a pretty important concept when using macros that you should be aware of: macro hygiene. Macro hygiene simply means the code in a macro doesn't accidentally interfere with code from outside it.

By default, Elixir macros are "hygienic." This means variables inside the macro will not inadvertently overwrite or collide with variables outside the macro.

Here's how that works:

defmodule Example do
defmacro hygienic do
  quote do: val = -1
  end
end

val = 42
Example.hygienic
IO.puts(val)
# Outputs: 42 (no conflict)
But if you need a macro to update a variable in the caller's context, you can use var!/2 to make it unhygienic. In other words, the macro will have access to variables outside of it.

defmodule Example do
  defmacro unhygienic do
    quote do: var!(val) = -1
end
end


val = 42
Example.unhygienic
IO.puts(val)
# Outputs: -1 (the value of val is changed by the macro)
7. Binding Variables
Finally, let's discuss binding variables in macros. Normally, when we use unquote inside a macro, the expression inside it is re-evaluated every time it's used. This can be problematic, especially if you're working with something that changes (like the current time).

This is a solution we could use binding. When we "bind" a variable, it's evaluated only once, so this can help avoid unwanted re-evaluation.

Here's a simple example demonstrating how a macro might use binding:

  defmodule Example do
    defmacro double_puts(expr) do
      quote bind_quoted: [expr: expr] do
        IO.puts(expr)
        IO.puts(expr)
      end
    end
  end

require Example
Example.double_puts(:os.system_time)
# Outputs the same time now
We use bind_quoted to ensure that expr is evaluated but once, no matter how many times it is used.

8. Private Macros
We touched on private macros above, but let's go a bit more in-depth on why and when you'd use them.

What are Private Macros?

Private macros are just like regular macros but can only be used within the module where they're defined. This is handy for organizing code that you don't want to expose publicly, or for internal utilities that only really make sense in the context of that module.

It's almost as if defining a private macro is giving yourself a "secret helper" only accessible within your module and not to other parts of your program.

Why Would I Want to Use Private Macros?

Just imagine that you have a really huge module with lots of functionality, and somewhere inside that module you need to perform some operation multiple times. You could simply repeat that in all these places; however, with macros you can create a private macro in order to be able to repeat all that work. Because private macros aren't accessible from the outside world, you don't pollute your clean, encapsulated code.

Example of usage of a private macro:

defmodule MyModule do
# Private macro
  defmacrop calculate(a, b) do
    quote do
      unquote(a) + unquote(b)
    end
  end

end

  def public_function do
    result = calculate(5, 10)  # This is allowed because calculate is defined inside the module
    IO.puts(result)
  end
end
In this example, the calculate macro is only available within MyModule. If you call MyModule.calculate(5, 10) outside of the module, an error will be raised.

How to Define a Private Macro:

You define a private macro by using defmacrop instead of defmacro. Private macros can only be called within the same module where they are defined. You will get an error if you try to call them outside. elixir

defmodule MyModule do
defmacrop private_macro do
    IO.puts("This is a private macro!")
  end
end
9. Macro Hygiene
Macro hygiene is another really important concept to know, it helps prevent accidental variable conflicts between the variables inside your macros with the ones in the code where the macro is being used.
What is Macro Hygiene?

Macro hygiene ensures that the variables inside your macro do not conflict with variables in the caller's code. It maintains the scope of the macro's variables separate from the caller's code. This is important because, if you do not hygienic, you could inadvertently write over or interfere with a variable in the caller's context.

Why Do We Need Macro Hygiene?

If hygiene was not present, there would always be a chance that a modification or disruption of the variable changed could occur in the calling context. For example, suppose you declare a variable within a macro but haven't scoped it nicely-you may unknowingly overwrite some variable outside of that macro.

How does Elixir handle macro hygiene?

For hygiene macros, Elixir supports a sane default: the variables used within a macro won't affect the variables in the context where the macro is invoked. This prevents such nasty variable overwrites accidentally.

Here is an example that shows hygienic macros:

defmodule MyModule do
  defmacro example do
    quote do
      val = 5
      IO.puts(val)
    end
  end
end
end
end

val = 10
MyModule.example
# This prints 5, not 10, because the macro is hygienic
Despite having a variable val = 10 in the caller's code, the macro does not replace it. That is because the val within the macro is isolated and prints out 5 since that is what it had defined in the macro.

What If You Need to Bypass Macro Hygiene?

Sometimes you will want a macro that must pull something out of the callers context to be passed as an argument. Then the only thing to do is declare a macro non-hygienic, and you can use var!/2. This means that your macro will modify the variable of its caller directly.

Here's an example for using non-hygienic macros:

defmodule MyModule do
  defmacro unhygienic do
    quote do
      var!(val) = 5  # This directly modifies the callers' `val
end
end
val = 10
MyModule.unhygienic
IO.puts(val)  # This prints 5 because the macro modified the caller's `val`
Note: Shun non-hygienic macros. They may lead to bugs and puzzling, so be using them very cautiously and just where strictly necessary.
10. Binding Variables in Macros
Use of unquote in macros creates a condition where something will be evaluated more than once- a shocking behavior. This may occur if the same expression is unquoted at different places. For example, if something has to do with the invocation of a function or a dynamic value such as system time, then you will result in different things since it happens to be evaluated more than once.

The Trouble with Multiple Evaluations:
Let's take a simple example: we need to print the same expression in two places:

defmodule Example do
  defmacro double_puts(expr) do
    quote do
      IO.puts(unquote(expr))
      IO.puts(unquote(expr))  # This re-evaluates expr
    end
  end
end

require Example
Example.double_puts(:os.system_time)

If you run this code, you may get two different times printed because the expression :os.system_time is evaluated twice.

How to Fix Re-Evaluation Using Binding:
To prevent an expression from being re-evaluated, we can use variable binding. This technique allows us to pass variables into the quoted code, ensuring that they are evaluated only once. You do this using the bind_quoted option in the quote function.

Hereâ€™s how binding works:

defmodule Example do
  defmacro double_puts(expr) do
    quote bind_quoted: [expr: expr] do
IO.puts(expr)  # expr is only evaluated once
      IO.puts(expr)  # expr is not re-evaluated
    end
  end
end

require Example
Example.double_puts(:os.system_time)
Now, even though expr is used twice, it's only evaluated once, and you'll get the same value printed both times. This eliminates the problem of re-evaluation.

11. Summary: Best Practices for Metaprogramming in Elixir
A powerful tool as metaprogramming is, yet it brings its own challenges. Here are some best practices on how to use metaprogramming effectively.

Use Metaprogramming Sparingly: While metaprogramming can save time and reduce repetition, it may make your code harder to understand. Thus, use it only when it really simplifies or makes your code more flexible.

Macro Hygiene is Your Friend: By default, Elixir macros are hygienic, which is a good thing. Avoid bypassing hygiene unless you have a really good reason, since non-hygienic macros can cause bugs or unintended behavior.

Avoid Repeated Evaluations : When writing macros that contain expressions that may change over time (like :os.system_time), use binding to make sure that those expressions are only evaluated once.

Private Macros for Internal Logic: When you want helper macros whose executions really shouldn't be visible from the outside your module, define some private macros using defmacrop. Your code, in this case, stays clean and encapsulated.

Always Document Your Macros : Since macros change code at compile time, it's very easy for others-or even you later-forget what a given macro actually does. Make sure to document your macros nicely.

Conclusion
Metaprogramming in Elixir is an awesome flexible feature to write a code that generates or modifies other code. Knowledge of quote, unquote, macros, debugging tools, macro hygiene and binding variables will assure you full utilization of metaprogramming capabilities in Elixir.

However, with great power comes great responsibility! Wise use of metaprogramming techniques should ensure the resulting code remains as maintainable and understandable as possible. Remember these suggestions: you'll be able to create more flexible, dynamic, and clean Elixir programs.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Umbrella projects in Elixir
An umbrella project in Elixir is the organization of a large code base by breaking it down into several smaller, manageable applications; these are also known as "apps." This helps you maintain your code modular so that you can work on parts of a project independently. A child app may focus on a specific domain or feature within the project. All these apps live inside a parent directory, which is the umbrella project.

Why Use Umbrella Projects?
As your project gets big, it could become awkward to keep everything in the same application. If you wish to break down concerns like machine learning algorithms and data sets from utilities and so on, then breaking up your project into pieces might make it much easier to maintain and scale. By using umbrella projects, you can:

Keep code modular with a focus on specific tasks.
Develop each app in isolation and test and build them independently.
Organization better manage dependencies, not by introducing one huge monolithic codebase. Make sure your project is organized.
1. Creating an Umbrella Project
When you decide to create an umbrella project, first, you create a new Mix project with the --umbrella flag.
bash
$ mix new machine_learning_toolkit --umbrella
This creates an umbrella project that looks something like this.
arduino
Copy code
machine_learning_toolkit/
â”œâ”€â”€ config/
â”‚   â””â”€â”€ config.exs
â”œâ”€â”€ apps/
â”‚   â””â”€â”€ (your child apps will go here)
â”œâ”€â”€ mix.exs
â””â”€â”€ README.md
â””â”€â”€ .gitignore
The apps/ directory will contain the child applications, while the config/ directory holds the overall configuration for the umbrella project.

2. Creating Child Projects (Apps)
Once you create your umbrella project, you can create independent child applications inside the apps/ directory. An example would be creating an app for datasets, one for utilities and another for machine learning models like SVM.

Here's how to create a few of the child apps:

bash
Copy code
$ cd machine_learning_toolkit/apps
$ mix new utilities
$ mix new datasets
$ mix new svm
Each of those commands will create a new application with its mix.exs, source code files underneath the lib/ folder, and a test folder for unit tests.

Example Project Structure
After you've created your apps your umbrella project will have the following structure:

bash
Copy code
machine_learning_toolkit/
â”œâ”€â”€ config/
â”‚   â””â”€â”€ config.exs
â”œâ”€â”€ apps/
â”‚   â”œâ”€â”€ datasets/
â”‚   â”‚   â”œâ”€â”€ lib/datasets.ex
â”‚   â”‚   â””â”€â”€ test/datasets_test.exs
â”‚   â”œâ”€â”€ svm/
â”‚   â”‚   â”œâ”€â”€ lib/svm.ex
â”‚   â”‚   â””â”€â”€ test/svm_test.exs
â”‚   â””â”€â”€ utilities/
â”‚       â”œâ”€â”€ lib/utilities.ex
â”‚       â””â”€â”€ test/utilities_test.exs
â”œâ”€â”€ mix.exs
â””â”€â”€ README.md
Here:
datasets to import and process datasets.
svm may consist of machine learning logic.
utilities would give helper functions which cut across the entire project.
3. Compiling the Project
An umbrella project will let you run Mix commands like compile in the root directory i.e., umbrella project directory and it will compile all child apps inside apps/ directory.

bash
Copy code
$ mix compile
It will compile all the child apps which in this case are datasets, svm, and utilities then update everything.

4. Working with Apps in an Umbrella Project
You might think that to work with particular apps in an umbrella project is different, but it's not. In fact, each of those individual apps remains an independent Elixir application, so you can work with them pretty much as you would with any other Elixir project.

To start an interactive Elixir shell with all apps loaded, run this from your project root directory:
```
bash
Copy
$ iex -S mix
This starts IEx (the Elixir shell) and automatically loads all your apps into the session. You can now call any function or module from your child apps as if they were part of the same project.
For example, suppose you define a function hello in the datasets app:
elixir
Copy code
# apps/datasets/lib/datasets.ex
defmodule Datasets do
def hello do
    IO.puts("Hello, I'm the datasets app!")
  end
end
Now you can call that function in the IEx session:
 
elixir
Copy code
iex> Datasets.hello
Hello, I'm the datasets app!
:ok
In this example, you can see how to use all the apps from the umbrella project and it's possible to use any of them directly in the IEx session.
 
5. Testing Individual Apps
Each child app of an umbrella project also has its own test suite. You can run tests for a specific app by changing into that app's directory, or you can run the command to run tests from the root of the umbrella.

Run the tests for the datasets app, for example, like this:

bash
Copy code
$ cd apps/datasets/
$ mix test
Or you can run tests for all apps in the umbrella like this:

bash
Copy code
$ mix test
This will run all tests for each app under the umbrella project.

6. How mix.exs Files Work
The mix.exs file is split between the umbrella project and child applications as follows:

Umbrella mix.exs: Located at the root of the umbrella project, this sets out the overall configuration of which apps are included in the umbrella as well as which dependencies are pulled in. In addition, it defines shared dependencies for all of the apps.
Example
elixir
Copy code
defmodule MachineLearningToolkit.MixProject do
use Mix.Project

  def project do
    [
      apps_path: "apps",
      deps: deps(),
      # Other configurations like version, build_path, etc.
    ]
  end

  defp deps do
    [
      # Dependencies shared across apps
    ]
  end
end
Child App mix.exs: Every child app within the umbrella project maintains its own mix.exs to provide configuration particular to that app, such as its dependencies, version, and build settings.

Example (for datasets app)

elixir
Copy code
defmodule Datasets.MixProject do
  use Mix.Project

  def project do
    [
      app: :datasets,
      version: "0.1.0",
      elixir: "~> 1.10",
deps: deps(),
      # Other configurations
    ]
  end

  defp deps do
    [
      # Datasets app specific dependencies
    ]
  end
end
7. Benefits of Umbrella Projects
Modularity: The umbrella projects promote modular development by splitting the project into multiple, independently manageable applications.
Better Dependency Management: dependencies may either be shared or separated considering the needs of each application.
Scaling is easier with the project as adding more applications is much easier. You can add new functionality in isolated applications.
Independent Testing: Each application can have its set of tests making correctness much easier.
Conclusion
Truly, umbrella projects in Elixir can be incredibly powerful as this splits even large and complex codebases into smaller applications. It lets you understand the dependencies that come from deep within your code and scale up your project as it keeps growing.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


